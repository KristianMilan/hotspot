#!/bin/bash
set +e

hotspotver="V0.917"
opt1="$1"
opt2="$2"
opt3="$3"
opt4="$4"
#
snam="hotspot"
eth_dev="eth0"
# wli_dev: on board wlan (e.g. wlan0)
# wle_dev: external wlan adaptor (optional)
# if defined, automatic discovery disabled
wli_dev=""
wle_dev=""
ap_dev="ap0"
ap_devmac="b8:27:eb:00:00:00"
ap_net="10.3.141"
ap_devext="$eth_dev"
ns_dom="local"
#
ap_ip="${ap_net}.1"
ap_subn="${ap_net}.255"
ap_ipanet="${ap_net}.1/24"
ap_iptsubn="${ap_net}.0/24"
ap_revip=`echo "$ap_ip" | awk -F "." '{ print $4"."$3"."$2"."$1 }'`
ap_revnet=`echo "$ap_ip" | awk -F "." '{ print $3"."$2"."$1 }'`
#
if [ "$wli_dev" == "" ]; then
# internal wlan adapter
  wli_devs=`ls -l --full-time /sys/class/net/ 2>/dev/null | grep -iE "mmc.*wlan" | cut -d" " -f9`
  wli_dev=`echo "$wli_devs" | awk -F " " '{ print $1 }'`
  if [ "$wli_dev" == "" ]; then wli_dev="wlan0"; fi
fi
if [ "$wle_dev" == "" ]; then
# external wlan adapter via usb
  wle_devs=`ls -l --full-time /sys/class/net/ 2>/dev/null | grep -iE "usb.*wlan" | cut -d" " -f9`
  wle_dev=`echo "$wle_devs" | awk -F " " '{ print $1 }'`
fi
#
wpactrl="/var/run/wpa_supplicant"
wpasupg="/etc/wpa_supplicant/wpa_supplicant.conf"
hostapdf="/etc/hostapd/hostapd.conf"
dnsmasqf="/etc/dnsmasq.conf"
crdaf="/etc/default/crda"
hostn="`hostname`"
# spot_ssid="${hostn}-hotspot"  # <hostname>-hotspot
spot_ssid="`echo "$hostn" | sed 's/./\U&/g'`wlan-`cat /sys/class/net/$wli_dev/address | awk -F ":" '{print $4$5$6}'`"  # <HOSTNAME>wlan-<lastMAC3byte>
spot_psk="hallohallo"
spot_cntry2="DE"
ovpn_dev="tun0"
ovpn_opt="--config /etc/openvpn/client/hotspot.ovpn --auth-user-pass /etc/openvpn/client/hotspot.pwd"

function Show_Defines {
  echo `date +"%Y-%m-%d %T"` "eth_dev:$eth_dev eth_subn:$eth_subn ap_ipanet:$ap_ipanet"
  echo `date +"%Y-%m-%d %T"` "wli_dev:$wli_dev wli_subn:$wli_subn wli_ip:$wli_ip"
  echo `date +"%Y-%m-%d %T"` "wle_dev:$wle_dev wle_subn:$wle_subn wle_ip:$wle_ip"
  echo `date +"%Y-%m-%d %T"` "hs_try:$hs_try $wle_dev avail: $wle_avail"
  echo `date +"%Y-%m-%d %T"` "wli_dev:$wli_dev wli_devs: $wli_devs"
  echo `date +"%Y-%m-%d %T"` "wle_dev:$wle_dev wle_devs: $wle_devs"
  echo `date +"%Y-%m-%d %T"` "apdvext:$ap_devext"
}

function Hotspot_Defines {
  eth_ip=`ip addr show dev "$eth_dev" 2>/dev/null   | awk '/inet / { print $2 }'`
  wli_ip=`ip addr show dev "$wli_dev" 2>/dev/null   | awk '/inet / { print $2 }'`
  eth_subn=`ip addr show dev "$eth_dev" 2>/dev/null | awk '/inet / { print $4 }'`
  wli_subn=`ip addr show dev "$wli_dev" 2>/dev/null | awk '/inet / { print $4 }'`
  if [ "$wle_dev" != "" ]; then
    wle_avail="yes"
    wle_ip=`ip addr show dev "$wle_dev" 2>/dev/null   | awk '/inet / { print $2 }'`
    wle_subn=`ip addr show dev "$wle_dev" 2>/dev/null | awk '/inet / { print $4 }'`
    if [ "$eth_ip" == "" ]; then ap_devext="$wle_dev"; fi
  fi
  if [ "$eth_subn" != "$ap_subn" ] && { [ "$wle_avail" == "yes" ] || [ "$eth_subn" == "$wli_subn" ] || [ "$wli_subn" == "" ]; }; then hs_try="yes"; fi
# Show_Defines
}

function fil_bck {
  if [ "$1" != "" ] && [ -f "$1" ]
  then
    if [ "$2" != "" ]; then fn="$1.$2"; else fn="$1.old"; fi
    cp "$1" "$fn"
  fi
}

function Hotspot_Status {
# echo `date +"%Y-%m-%d %T"` "Status Hotspot ..."
  ps ax | grep wpa_ ; ip a ; hostname -I
}

function Mod_Para {
  cfil="file_not_valid"
  if [ "$1" == "hostapd" ]; then cfil="$hostapdf"; fi
  if [ "$1" == "dnsmasq" ]; then cfil="$dnsmasqf"; fi
  if [ "$1" == "crda" ];    then cfil="$crdaf"; fi
  if [ "$1" == "self" ];    then cfil="$0"; fi
  if [ "$cfil" != "file_not_valid" ]; then
    logger -s -t $snam "  change  $1 $2=$3 ($cfil)"
    if [ "$1" == "self" ];  then
      sed -i -r "s/$2[ ]*=.*/$2=\"$3\"/g" "$cfil"
    else
      sed -i -r "s/$2[ ]*=.*/$2=$3/g" "$cfil"
    fi
  else
    echo "  Mod_Para invalid file selector $1"
  fi
}

function ipt_cln {
  logger -s -t $snam "  IPTable $1 $2"
  iptables -t nat -F
  iptables -t mangle -F
  iptables -t nat -X
  iptables -t mangle -X
  iptables -t raw -F
  iptables -t raw -X
  iptables -F
  iptables -X
}

function ipt_chains {
  logger -s -t $snam "  IPTable chains"
  iptables -P INPUT   ACCEPT
  iptables -P OUTPUT  ACCEPT
  iptables -P FORWARD ACCEPT
}

function ipt_ap {
  logger -s -t $snam "  IPTable ap   $1 $ap_devext $ap_dev $ap_iptsubn"
  iptables -t nat $1 POSTROUTING -s $ap_iptsubn ! -d $ap_iptsubn -j MASQUERADE
  iptables $1 FORWARD -i $ap_devext -o $ap_dev -m state --state RELATED,ESTABLISHED -j ACCEPT
  iptables $1 FORWARD -i $ap_dev -o $ap_devext -j ACCEPT
}

function ipt_ovpn {
  logger -s -t $snam "  IPTable ovpn $1 $ovpn_dev $ap_dev"
  iptables -t nat $1 POSTROUTING -o $ovpn_dev -j MASQUERADE
  iptables $1 FORWARD -i $ovpn_dev -o $ap_dev -m state --state RELATED,ESTABLISHED -j ACCEPT
  iptables $1 FORWARD -i $ap_dev -o $ovpn_dev -j ACCEPT
}

function ipt_tor {
  logger -s -t $snam "  IPTable tor  $1 $ap_dev (using ports 22 53 9040)"
  iptables -t nat $1 PREROUTING -i $ap_dev -p tcp --dport 22 -j REDIRECT --to-ports 22
  iptables -t nat $1 PREROUTING -i $ap_dev -p udp --dport 53 -j REDIRECT --to-ports 53
  iptables -t nat $1 PREROUTING -i $ap_dev -p tcp --syn -j REDIRECT --to-ports 9040
}

function ipt_do {
  if [ "$1" == "add" ] || [ "$1" == "del" ]; then
    logger -s -t $snam "  IPTable $1 $2"
    if [ "$1" == "add" ];  then opt="-A"; else opt="-D"; fi
    if [ "$2" == "tor" ];  then ipt_tor  "$opt"; fi
    if [ "$2" == "ovpn" ]; then ipt_ovpn "$opt"; fi
    if [ "$2" == "ap" ];   then ipt_ap   "$opt"; fi
  else
    if [ "$1" == "cln" ]; then
      ipt_cln "$1" "$2"
    else
      logger -s -t $snam "  IPTable invalid option $1"
    fi
  fi
}

function ipt_wipe {
  if [ "`grep -c -F "wipeiptables=1" "$hostapdf"`" -gt "0" ]; then
    ipt_cln "cln" "$2"
  fi
}
function ipt_use {
  if [ "`grep -c -F "useiptables=1" "$hostapdf"`" -gt "0" ]; then
    ipt_do "$1" "$2"
  fi
}

function stop_ap_dev {
  if [ "$1" != "" ]; then
    ip -force link set dev "$1" down
    ip addr flush dev "$1"
  fi
}

function inst_ap_dev {
  wdev="$1"
  if [ "$wdev" != "$ap_dev" ] && [ "$wdev" != "" ]; then
    logger -s -t $snam "  install & check dev $ap_dev"
    apnet255=`ip addr show dev "$ap_dev" 2>/dev/null | awk '/inet / { print $4 }'`
    if [ "$ap_subn" != "$apnet255" ]; then
      logger -s -t $snam "  assign  dev $ap_dev $ap_ipanet on $wdev"
      iw dev $wdev interface add $ap_dev type __ap
      stop_ap_dev "$ap_dev"
#     ip link set $ap_dev address $ap_devmac
      ip a add "$ap_ipanet" brd + dev "$ap_dev"
      ip link set dev "$ap_dev" up
    fi
    apipn=`ip addr show dev "$ap_dev" 2>/dev/null | awk '/inet / { print $2 }'`
    if [ "$apipn" == "$ap_ipanet" ]; then
      logger -s -t $snam "  install dev $ap_dev done"
    else
      logger -s -t $snam "  ERROR:  install dev $ap_dev"
    fi
  fi
}

function wlan {
  if [ "$wle_avail" != "yes" ]; then wl_dev="$wli_dev"; else wl_dev="$wle_dev"; fi
  if [ "$2" != "" ]; then wl_dev="$2"; fi
  case "$1" in
        start)
            logger -s -t $snam "  start   wlan    $wl_dev"
            wpa_supplicant -B -i $wl_dev -c $wpasupg >/dev/null 2>&1
            ;;
        stop)
            logger -s -t $snam "  stop    wlan    $wl_dev"
            wpa_cli -p $wpactrl -i $wl_dev terminate >/dev/null 2>&1
            ;;
        *)
            echo "Usage: $snam wlan start|stop [$wli_dev|$wle_dev]"
            exit 1
  esac
}

function do_iptab {
  case "$1" in
        plain)
            ipt_cln "flush"
            ipt_chains
            ;;
        *)
            echo "Usage: $snam ipt plain"
            exit 1
  esac
}

function do_ovpn {
  case "$1" in
        start)
            logger -s -t $snam "  start   openvpn (experimental)"
            ipt_do "del" "ap"
            ipt_do "add" "ovpn"
            openvpn $ovpn_opt &
            ;;
        stop)
            logger -s -t $snam "  stop    openvpn (experimental)"
            killall openvpn
            ipt_do "del" "ovpn"
            ;;
        *)
            echo "Usage: $snam ovpn start|stop"
            exit 1
  esac
}

function do_tor {
  case "$1" in
        start)
            logger -s -t $snam "  start   tor (experimental)"
            ipt_do "del" "ap"
            ipt_do "add" "tor"
            service tor restart
            ;;
        stop)
            logger -s -t $snam "  stop    tor (experimental)"
            service tor stop
            ipt_do "del" "tor"
            ;;
        *)
            echo "Usage: $snam tor start|stop"
            exit 1
  esac
}

function do_syslog {
  if [ "$1" != "" ]; then lins="-A $1"; else lins=""; fi
  tail -500 /var/log/syslog | grep -a $lins "${snam}:"
}

function Find_Chan {
# find best (least used) channel
  chanw=""
  if [ "$1" != "" ]; then
    iwlist $1 chan | grep -i " : $3" | sed 's/  //g' | sed 's/Channel 0//g' | sed 's/Channel //g' | awk -F " " '{ print $1 }' > /tmp/$1_$3_scan.txt
    iwlist $1 scan | grep -i "Frequency:$3" | sort | uniq -c | sort -n | sed 's/  //g' | sed 's/)//g' | awk -F " " '{ print $5 }' >> /tmp/$1_$3_scan.txt
    chans=`cat /tmp/$1_$3_scan.txt | sort | uniq -c | sort -n | awk -F " " '{ print $2 }' | tr '\n' ' '`
    chanw=`echo "$chans" | awk '{print $1}'`
  fi
  if [ "$chanw" == "" ]; then chanw="$2"; fi
  if [ "$chanw" == "" ]; then chanw="11"; fi
}

function Mdfy_Chan {
  logger -s -t $snam "  modify  channel strategy: $1 $2 $3"
  if [ "$2" != "" ]; then
    ch="$2"
  else
    chan2ghz="6"
    chan5ghz="36"
    hf=`iw phy | grep -ciF "VHT Capabilities"`
    if [ "$hf" -ge "1" ]; then ch="$chan5ghz"; else ch="$chan2ghz"; fi
  fi
  if [ "$ch" -le "14" ]; then hm="g"; else hm="a"; fi
  if [ "$ch" -gt "48" ]; then att="$ch (can cause problem)"; else att="$ch"; fi
  logger -s -t $snam "  select  hw_mode $hm  chan $att"
  Mod_Para "hostapd" "channel" "$ch"
  Mod_Para "hostapd" "hw_mode" "$hm"
}

function Hotspot_Start {
  Hotspot_Defines
  logger -s -t $snam "starting  hotspot $hotspotver"
  logger -s -t $snam "  ETHER   $eth_dev    $eth_ip"
  logger -s -t $snam "  WLANint $wli_dev   $wli_ip"
  logger -s -t $snam "  WLANext $wle_dev   $wle_ip"
  chanh=`cat "$hostapdf" | awk '/channel=/ { print $1 }' | sed 's/channel=//g'`
  if [ "$wle_avail" == "yes" ] || [ "$eth_ip" != "" ] || [ "yes" == "yes" ]; then
    apsta="no"
    Find_Chan "$wli_dev" "11"
    logger -s -t $snam "  FndChan suggest channel $chanw"
    msg="select channel for ap mode"
  else
    apsta="yes"
    chanw=`iwlist $wli_dev channel | awk '/urrent / { print $5 }' | sed 's/)//g'`
    msg="select same channel for ap & station mode"
    logger -s -t $snam "  UseChan channel $chanw"
  fi
  if [ "$chanw" != "$chanh" ] && [ "$chanw" != "" ]; then
    Mdfy_Chan "$msg" "$chanw" "$chanh"
  fi
  if [ "$1" == "nowlan" ]; then wlan stop $wli_dev; fi
  logger -t $snam "  stop    hostapd"
  systemctl stop hostapd
  logger -t $snam "  stop    dnsmasq"
  systemctl stop dnsmasq
  echo 1 > /proc/sys/net/ipv4/ip_forward
# if [ "$apsta" == "yes" ]; then ip link set $wli_dev down; fi
  inst_ap_dev $wli_dev
  sleep 5
  ipt_wipe "cln" "ap"
  ipt_do   "add" "ap"
  logger -s -t $snam "  start   hostapd restart"
  systemctl restart  hostapd
# if [ "$apsta" == "yes" ]; then ip link set $wli_dev up; fi
  logger -s -t $snam "  start   dnsmasq"
  systemctl restart dnsmasq
  logger -s -t $snam "started   hotspot"

  if [ "`grep -c -F "nodogsplashstart=1" "$hostapdf"`" -gt "0" ]; then
    logger -s -t $snam "start     captive portal (nodogsplash)"
    nodogsplash
  fi

  if [ "`grep -c -F "ovpnstart=1" "$hostapdf"`" -gt "0" ]; then
    do_ovpn start
  fi

  if [ "`grep -c -F "torstart=1" "$hostapdf"`" -gt "0" ]; then
    do_tor start
  fi
}

function Hotspot_Try {
  logger -s -t $snam "trying    hotspot"
  sleep 20     # let wlan settle
  Hotspot_Defines
  if [ "$hs_try" == "yes" ]; then
    logger -s -t $snam "  try     hotspot"
    Hotspot_Start nowlan
  else
    if [ "$wli_subn" != "" ] && [ "$wli_subn" != "$ap_subn" ]; then
      logger -s -t $snam "  ap&sta  on $wli_dev start hotspot in parallel to station mode (not supported, use eth0 or additional usb wlan adaptor)"
#     Hotspot_Start wlan
    else
      logger -s -t $snam "  ERROR   subnet conflict $eth_dev $eth_subn $wli_dev $wli_subn $ap_dev $ap_subn"
    fi
  fi
}

function Hotspot_Stop {
  logger -s -t $snam "stopping  hotspot"
  logger -s -t $snam "  stop       hostapd"
  systemctl stop hostapd
  sleep 2
  logger -s -t $snam "  stop       dnsmasq"
  systemctl stop dnsmasq
  echo 0 > /proc/sys/net/ipv4/ip_forward
  ipt_do "del" "ap"
  sleep 2
  if [ "$1" != "nowlan" ]; then
    wlan start $wli_dev
    sleep 10
  fi
  logger -s -t $snam "  link    down dev $ap_dev"
  stop_ap_dev "$ap_dev"
  iw dev $ap_dev del
  logger -s -t $snam "stopped   hotspot"
}

function Hotspot_Setup {
  echo `date +"%Y-%m-%d %T"` "Setup  Hotspot $1 $2 ..."
  if [ "$1" != "noswpkg" ]; then
    echo `date +"%Y-%m-%d %T"` "install sw packages"
    apt-get -qy install iw hostapd dnsmasq tor openvpn
  fi
# disable/stop services. starting by script if needed
  systemctl disable dnsmasq.service >/dev/null 2>&1
  systemctl stop    dnsmasq.service >/dev/null 2>&1
  systemctl disable hostapd.service >/dev/null 2>&1
  systemctl stop    hostapd.service >/dev/null 2>&1
  update-rc.d tor   disable >/dev/null 2>&1
  service tor stop  >/dev/null 2>&1

  bckext=`date +"%Y%m%d%H%M%S"`

  fil="/etc/rc.local"
  fil2="/etc/issue"
  fil_bck "$fil"  "$bckext"
  fil_bck "$fil2" "$bckext"
  echo `date +"%Y-%m-%d %T"` "create $fil"
  cat <<EOF > "$fil"
#!/bin/sh -e
#file autocreated, do not edit
#

if [ "\`grep -c -F "autostart=1" "/etc/hostapd/hostapd.conf"\`" -gt "0" ]; then
  hotspot try >/tmp/hotspot.log 2>&1
fi

# Print the IP address
_IP=\$(hostname -I) || true
if [ "\$_IP" ]; then
  logger -s -t hotspot "My IP address is \$_IP"
  printf "IP %s\nRaspbian GNU/Linux\n" "\$_IP" > /etc/issue
else
  printf "Raspbian GNU/Linux\n" > /etc/issue
fi

exit 0
EOF
  chmod 750 "$fil"

  fil="/etc/sysctl.conf"
  fil_bck "$fil" "$bckext"
# net.ipv4.ip_forward=1
  grep -q -F "net.ipv4.ip_forward=" $fil || echo "net.ipv4.ip_forward=" >> $fil
  sed -r -i 's/net\.ipv4\.ip_forward[ ]*=.*/net\.ipv4\.ip_forward=1/g' $fil
  sed -r -i 's/#net\.ipv4\.ip_forward=1/net\.ipv4\.ip_forward=1/g' $fil

  fil="/etc/dhcpcd.conf"
  fil_bck "$fil" "$bckext"
  echo `date +"%Y-%m-%d %T"` "create $fil"
  cat <<EOF > "$fil"
hostname
clientid
persistent
option rapid_commit
option domain_name_servers, domain_name, domain_search, host_name
option classless_static_routes
option ntp_servers
option interface_mtu
require dhcp_server_identifier
slaac private

timeout 25

denyinterfaces ap0
interface ap0
  nohook wpa_supplicant
  #static ip_address=10.3.141.1/24
EOF
  chmod 664 "$fil"
  chown root:netdev "$fil"

  fil="/etc/dnsmasq.conf"
  fil_bck "$fil" "$bckext"
  echo `date +"%Y-%m-%d %T"` "create $fil"
  cat <<EOF > "$fil"
dhcp-mac=set:client_is_a_pi,B8:27:EB:*:*:*
dhcp-reply-delay=tag:client_is_a_pi,2

# Never forward plain names (without a dot or domain part)
domain-needed
no-dhcp-interface=eth0,wlan0
listen-address=$ap_ip
listen-address=127.0.0.1
bind-interfaces

#==========[ NAMESERVER ]==========#

no-hosts # Do not read /etc/hosts
# Read additional hosts-file (not only /etc/hosts) to add entries into DNS
#addn-hosts=/etc/dnsmasq_static_hosts.conf
expand-hosts
domain=$ns_dom
local=/$ns_dom/$ap_ip

# Host & PTR & Reverse
host-record=$hostn.$ns_dom,$ap_ip
server=/$ap_revnet.in-addr.arpa/$ap_ip
ptr-record=$ap_revip.in-addr.arpa,$hostn.$ns_dom

#==========[ DHCP ]==========#

dhcp-range=$ap_net.50,$ap_net.199,255.255.255.0,12h
dhcp-option=option:router,$ap_ip
#dhcp-option=option:ntp-server,$ap_ip

dhcp-option=vendor:MSFT,2,1i # Tell MS Windows to release a lease on shutdown
dhcp-option=44,$ap_ip    # set netbios-over-TCP/IP aka WINS
dhcp-option=45,$ap_ip    # netbios datagram distribution server
dhcp-option=46,8             # netbios node type
dhcp-option=252,"\n"         # REQUIRED to get win7 to behave

# DHCPv4 Should be set when dnsmasq is definitely the only DHCP server on a network
#dhcp-authoritative
# DHCPv4 Server will attempt to ensure that an address is not in use before allocating it to a host
#no-ping

#==========[ etc ]==========#

log-facility=/var/log/syslog
#log-queries
#log-dhcp
log-async
local-ttl=2
local-service
localise-queries
EOF
  chmod 644 "$fil"

  fil="/etc/default/hostapd"
  fil_bck "$fil" "$bckext"
  echo `date +"%Y-%m-%d %T"` "create $fil"
  cat <<EOF > "$fil"
#RUN_DAEMON=yes
DAEMON_CONF="/etc/hostapd/hostapd.conf"
EOF
  chmod 600 "$fil"

  fil="/etc/hostapd/hostapd.conf"
  fil_bck "$fil" "$bckext"
  echo `date +"%Y-%m-%d %T"` "create $fil (pls. adjust SSID, PWD and country code)"
  cat <<EOF > "$fil"
#start#### do not remove next few lines ######
#autostart=0
#useiptables=0
#wipeiptables=0
#torstart=0
#ovpnstart=0
#nodogsplashstart=0
#end###### used by hotspot script ############

ctrl_interface=/var/run/hostapd
ctrl_interface_group=0
interface=ap0
driver=nl80211

channel=6
hw_mode=g
country_code=$spot_cntry2
ssid=$spot_ssid
wpa_passphrase=$spot_psk

wpa=2
wpa_key_mgmt=WPA-PSK
rsn_pairwise=CCMP

ieee80211n=1
ieee80211d=1
ieee80211ac=1
wmm_enabled=1
macaddr_acl=0
ignore_broadcast_ssid=0
auth_algs=1

logger_syslog=-1
logger_syslog_level=4
logger_stdout=-1
logger_stdout_level=4
EOF
  Mdfy_Chan "select default channel"
  Mod_Para  "hostapd" "autostart" "1"
  chmod 640 "$fil"

  fil="/etc/tor/torrc"
  fil_bck "$fil" "$bckext"
  echo `date +"%Y-%m-%d %T"` "create $fil"
  cat <<EOF > "$fil"
Log notice file /var/log/tor-notices.log
VirtualAddrNetwork 10.192.0.0/10
AutomapHostsSuffixes .onion,.exit
AutomapHostsOnResolve 1
TransPort 10.3.141.1:9040
DNSPort 10.3.141.1:53
EOF
  chmod 644 "$fil"
  touch /var/log/tor-notices.log >/dev/null 2>&1
  chown debian-tor /var/log/tor-notices.log >/dev/null 2>&1
  chmod 644 /var/log/tor-notices.log >/dev/null 2>&1
}

Hotspot_Defines

case "$opt1" in
        try)
            Hotspot_Try   "$opt2"
            ;;
      start)
            Hotspot_Start "$opt2"
            ;;
       stop)
            Hotspot_Stop  "$opt2"
            ;;
    restart)
            Hotspot_Stop   nowlan
            logger -s -t $snam "  20sec  settle time"
            sleep 20
            Hotspot_Start "$opt2"
            ;;
      retry)
            Hotspot_Stop   nowlan
            logger -s -t $snam "  20sec  settle time"
            sleep 20
            Hotspot_Try   "$opt2"
            ;;
       wlan)
            wlan          "$opt2" "$opt3"
            ;;
     modpar)
            Mod_Para      "$opt2" "$opt3" "$opt4"
            ;;
    setchan)
            Mdfy_Chan     "given_by_cli" "$opt2" "given_by_cli"
            ;;
      setup)
            Hotspot_Setup "$opt2" "$opt3"
            ;;
     syslog)
            do_syslog     "$opt2"
            ;;
        tor)
            do_tor        "$opt2"
            ;;
       ovpn)
            do_ovpn       "$opt2"
            ;;
       ipt)
            do_iptab      "$opt2"
            ;;
    version)
            echo "$hotspotver"
            ;;
     status)
            Hotspot_Status
            ;;
          *)
  echo "Usage: $snam try | start [nowlan] | stop [nowlan] | retry | restart [nowlan] | status | setup | setchan [channel] | syslog [lines] | ipt [plain] | tor [start|stop] | ovpn [start|stop] | modpar <crda|dnsmasq|hostapd|self> <name> [value] | version | wlan start|stop [$wli_dev|$wle_dev]"
  exit 1
esac

